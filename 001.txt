 docker run hello-world //lo que nos dice es que ejecuta una imagen
 docker images // esto nos lista una imagen
 docker container ls //esto nos lista los contenedores
 docker container ls -a //nos lista los contenedores aunque no esten activos
 docker rm d7 //docker rm contenedor-nombre elimina el contenedor que tenemos en docker
 docker image rm imagen-nombre // elimina la imagen que nos hemos descargado
 docker pull nombre-imagen //se trae la imagen
docker container ls -a --format "{{.ID}}"
docker container ls -a --format "{{.ID}} {{.Names}}"
docker container rm micontenedor //eliminar por nombre
docker pull mysql
docker run --name mi_mysql  -e MYSQL_ROOT_PASSWORD=cecilio  mysql
docker run --name milinux  -d  alpine
docker exec -it mi_mysql bash
mysql -u root -p 
show databases;
docker logs mi_mysql
docker pull nginx
docker run --name mi_nginx -d nginx
docker exec -it mi_nginx bash
docker inspect -f "{{.ID}}{{.IPAddress}}" 
docker run --name mi_nginx -d  -p 8080:80 nginx
docker run --name mi_phpmyadmin -d  -p 8080:80 phpmyadmin
docker run --name mi_phpmyadmin -d --link mi_mysql:db -p 8080:80 phpmyadmin
docker exec -it mi_mysql bash
docker network create mired
docker network ls
docker pull wordpress
docker container run --name miwordpress --network mired -p 8081:80 -e WORDPRESS_DB_HOST=mi_mysql -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=cecilio  -e WORDPRESS_DB_NAME=wordpress -d  wordpress
docker network inspect mired
docker run --name mi_phpmyadmin --network mired -e PMA_HOST=mi_mysql -p 8080:80 phpmyadmin
docker pull eclipse-temurin:17-jdk-jammy
docker run --name tomcat -p 8888:8080 tomcat:9.0.82-jdk8-temurin-focal
docker exec -it tomcat bash
docker container ls -a --format "{{.ID}} {{.Names}}"
docker cp .\weboseia.war tomcat:/usr/local/tomcat/webapps
docker build -t tomcatapp .
docker run --name mitomcatapp -p 8080:8080 tomcatapp
docker run --name mitomcatapp2 -p 8081:8080 tomcatapp2
docker system prune -a
docker run --name mitomcatapp -p 8080:8080 mitomcat
docker build -t nodeapp  .
/usr/local/tomcat/lib/servlet-api.jar  
docker run --name minode -p 3000:3000  nodeapp
javac -cp /usr/local/tomcat/lib/servlet-api.jar  HolaSQL.java 

docker run --name mispringboot -p 8080:8080  nodeapp
